/*
 * Copyright (c) 2018 CA. All rights reserved.
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */
plugins {
    id "org.sonarqube" version "2.6.2"
    id "com.srcclr.gradle" version "3.0.3" apply false
    id "com.jfrog.bintray" version "1.8.4" apply false
}

description = 'The gateway-developer-plugin enables developing gateway configuration.'
group 'com.ca.apim.gateway'
tag {
    message {
        "version: ${version} build-date: " + new Date().format('yyyy-MM-dd\'T\'HH:mm:ss')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.srcclr.gradle'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    group 'com.ca.apim.gateway'
    version = rootProject.version

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            attributes(
                    "Implementation-Title": name,
                    "Implementation-Version": version)
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api:5.2.0")
        testCompile("io.github.glytching:junit-extensions:2.2.0")
        testCompile 'org.mockito:mockito-junit-jupiter:2.19.0'
        testRuntime("org.junit.jupiter:junit-jupiter-engine:5.2.0")
        testCompile 'org.testcontainers:testcontainers:1.4.3'
    }

    //runs tests in parallel
    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    artifacts {
        archives javadocJar, sourceJar
    }

    // Create the pom configuration:
    def pomConfig = {
        scm {
            url 'https://github.com/ca-api-gateway/gateway-developer-plugin'
        }

        licenses {
            license {
                name 'MIT'
                url 'https://github.com/ca-api-gateway/gateway-developer-plugin/blob/master/LICENSE'
            }
        }

        developers {
            developer {
                id 'apigatewayopensource'
                name 'CA API Gateway Bot'
                email 'API-Gateway-OpenSource@ca.com'
            }
        }
    }

    publishing {
        publications {
            BinTrayPublication(MavenPublication) {
                from components.java
                artifact sourceJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', project.description)
                    root.appendNode('name', project.name)
                    root.appendNode('url', 'https://github.com/ca-api-gateway/gateway-developer-plugin')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['BinTrayPublication']
        publish = true
        pkg {
            repo = 'gateway-developer-plugin'
            userOrg = 'ca-api-gateway'
            name = project.name
            desc = project.description
            licenses = ['MIT']
            websiteUrl = 'https://github.com/ca-api-gateway/gateway-export-plugin'
            issueTrackerUrl = 'https://waffle.io/ca-api-gateway/gateway-developer-plugin'
            vcsUrl = 'https://github.com/ca-api-gateway/gateway-developer-plugin.git'
            githubRepo = 'ca-api-gateway/gateway-developer-plugin'
            version {
                name = version
                released = new Date()
                vcsTag = 'release/' + version
                gpg {
                    sign = true
                }
                mavenCentralSync {
                    user = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSS_USER') //OSS user token: mandatory
                    password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSS_PASSWORD') //OSS user password: mandatory
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '4.7'
}